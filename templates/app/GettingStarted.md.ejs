# Welcome to your TypeScript Generator
This workspace allows you to easilly create yeoman generators written in TypeScript.

## What's in the folder?
<% if (HasCodeWorkspace) { %>
  - `.vscode`  
    This folder contains settings and build-task configurations for VSCode.
<% } %>
  - `src`  
    This is where you program your module in TypeScript.  
    The TypeScript-Compiler is configured to use this folder as the root of your source-code.
    - `src/generators`
      This folder holds the generators written in TypeScript.
  - `lib`  
    The `lib`-folder is the one where your compiled `.js`-files are written to.
  - `tsconfig.json`  
    This is the file where the compiler-options are configured.  
    [Learn more...][TypeScriptConfig]
  - `tslint.json`
    This file mostly holds rules for your coding-style.  
    [Learn more...][TSLintConfig]

## Working with the Library
### Creating a Generator
You can create the main generator by creating a directory called `app` or a sub-generator by creating a directory called `{ sub-generator-name }` inside the `src/generators`-directory.  
Create a generator by creating an `index.ts`-file inside said directory and let it derive from the `Generator` class located in the `src/Generator.ts` file.

Use the IntelliSense of your TypeScript-editor for getting more information about the different useful class members.

  - The `TemplateRoot`-member allows you to specify a path to the templates relative to the `templates/`-directory
  - The `ProvidedComponents`-member allows you to specify components users can optionally choose to install
  - The `Questions`-member contains questions users are prompted to answer during the execution of `Generator.prompting()`

### Testing the Generator
In order to test the generator you must link it to the global `node_modules`-directory.  
Do this by invoking following command:
```bash
npm link
```

Before you can start your can run your generator you need to compile the TypeScript-code by either hitting <kbd>CTRL</kbd>, <kbd>SHIFT</kbd> + <kbd>B</kbd> in Visual Studio Code or by invoking:
```bash
npm run compile
```

You can then run your generator by invoking<%
%><% if (SubGeneratorName !== null) { %><%
%> either one of these commands:
```bash
yo <%= Name.replace(/^generator-/, "") %>
yo <%= Name.replace(/^generator-/, "") %>:<%= SubGeneratorName %>
```<%
%><% } else { %><%
%> following command: 
```bash
yo <%= Name.replace(/^generator-/, "") %>
```<%
%><% } %>

<!--- References -->
[TypeScriptConfig]: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
[TSLintConfig]: https://palantir.github.io/tslint/usage/configuration/